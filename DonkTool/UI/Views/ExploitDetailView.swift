//
//  ExploitDetailView.swift
//  DonkTool
//
//  Detailed Exploit Information View
//

import SwiftUI

struct ExploitDetailView: View {
    @Environment(\.dismiss) private var dismiss
    let exploit: ExploitEntry
    @StateObject private var exploitDB = ExploitDatabase.shared
    @State private var exploitCode: ExploitCode?
    @State private var isDownloading = false
    @State private var relatedCVE: CVEEntry?
    @State private var showingCodeViewer = false
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(alignment: .leading, spacing: 20) {
                    headerSection
                    exploitDetailsSection
                    technicalDetailsSection
                    
                    if let cve = relatedCVE {
                        relatedCVESection(cve)
                    }
                    
                    if let code = exploitCode {
                        exploitCodeSection(code)
                    } else {
                        downloadSection
                    }
                    
                    referencesSection
                }
                .padding()
            }
            .navigationTitle("Exploit Details")
            .toolbar {
                ToolbarItem(placement: .automatic) {
                    Button("Done") {
                        dismiss()
                    }
                }
            }
        }
        .task {
            await loadRelatedData()
        }
        .sheet(isPresented: $showingCodeViewer) {
            if let code = exploitCode {
                ExploitCodeViewer(exploitCode: code)
            }
        }
    }
    
    private var headerSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                VStack(alignment: .leading) {
                    Text(exploit.title)
                        .font(.title2)
                        .bold()
                        .lineLimit(2)
                    
                    Text("by \(exploit.author)")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }
                
                Spacer()
                
                if exploit.verifiedWorking {
                    VStack {
                        Image(systemName: "checkmark.seal.fill")
                            .foregroundColor(.green)
                            .font(.title2)
                        Text("Verified")
                            .font(.caption)
                            .foregroundColor(.green)
                    }
                }
            }
            
            HStack {
                exploitTypeBadge
                difficultyBadge
                
                if let cveId = exploit.cveId {
                    cveBadge(cveId)
                }
                
                Spacer()
            }
        }
    }
    
    private var exploitTypeBadge: some View {
        Text(exploit.type.rawValue)
            .font(.caption)
            .padding(.horizontal, 8)
            .padding(.vertical, 4)
            .background(typeColor(exploit.type).opacity(0.2))
            .foregroundColor(typeColor(exploit.type))
            .cornerRadius(6)
    }
    
    private var difficultyBadge: some View {
        Text(exploit.difficulty.rawValue)
            .font(.caption)
            .padding(.horizontal, 8)
            .padding(.vertical, 4)
            .background(difficultyColor(exploit.difficulty).opacity(0.2))
            .foregroundColor(difficultyColor(exploit.difficulty))
            .cornerRadius(6)
    }
    
    private func cveBadge(_ cveId: String) -> some View {
        Text(cveId)
            .font(.caption)
            .padding(.horizontal, 8)
            .padding(.vertical, 4)
            .background(Color.blue.opacity(0.2))
            .foregroundColor(.blue)
            .cornerRadius(6)
    }
    
    private var exploitDetailsSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Exploit Information")
                .font(.headline)
            
            VStack(spacing: 12) {
                InfoRow(label: "Exploit ID", value: exploit.id)
                InfoRow(label: "Type", value: exploit.type.rawValue)
                InfoRow(label: "Difficulty", value: exploit.difficulty.rawValue)
                InfoRow(label: "Skill Level", value: "\(exploit.difficulty.skillLevel)/5")
                
                if exploit.verifiedWorking {
                    InfoRow(label: "Status", value: "Verified Working", valueColor: .green)
                } else {
                    InfoRow(label: "Status", value: "Unverified", valueColor: .orange)
                }
                
                if let lastTested = exploit.lastTested {
                    InfoRow(label: "Last Tested", value: lastTested.formatted(date: .abbreviated, time: .omitted))
                }
            }
            .padding()
            .background(Color.gray.opacity(0.1))
            .cornerRadius(12)
        }
    }
    
    private var technicalDetailsSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Technical Details")
                .font(.headline)
            
            VStack(alignment: .leading, spacing: 8) {
                Text("Supported Platforms")
                    .font(.subheadline)
                    .bold()
                
                LazyVGrid(columns: [
                    GridItem(.flexible()),
                    GridItem(.flexible()),
                    GridItem(.flexible())
                ], spacing: 8) {
                    ForEach(exploit.platform, id: \.self) { platform in
                        Text(platform)
                            .font(.caption)
                            .padding(.horizontal, 8)
                            .padding(.vertical, 4)
                            .background(Color.gray.opacity(0.2))
                            .cornerRadius(6)
                    }
                }
            }
            .padding()
            .background(Color.gray.opacity(0.1))
            .cornerRadius(12)
            
            if !exploit.tags.isEmpty {
                VStack(alignment: .leading, spacing: 8) {
                    Text("Tags")
                        .font(.subheadline)
                        .bold()
                    
                    LazyVGrid(columns: [
                        GridItem(.flexible()),
                        GridItem(.flexible()),
                        GridItem(.flexible())
                    ], spacing: 8) {
                        ForEach(exploit.tags, id: \.self) { tag in
                            Text(tag)
                                .font(.caption)
                                .padding(.horizontal, 8)
                                .padding(.vertical, 4)
                                .background(Color.blue.opacity(0.2))
                                .foregroundColor(.blue)
                                .cornerRadius(6)
                        }
                    }
                }
                .padding()
                .background(Color.gray.opacity(0.1))
                .cornerRadius(12)
            }
        }
    }
    
    private func relatedCVESection(_ cve: CVEEntry) -> some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Related CVE")
                .font(.headline)
            
            VStack(alignment: .leading, spacing: 8) {
                HStack {
                    Text(cve.id)
                        .font(.subheadline)
                        .bold()
                    
                    Spacer()
                    
                    VStack(alignment: .trailing) {
                        Text(String(format: "%.1f", cve.cvssScore))
                            .font(.headline)
                            .bold()
                            .foregroundColor(cve.severity.color)
                        
                        Text(cve.severity.rawValue)
                            .font(.caption)
                            .padding(.horizontal, 6)
                            .padding(.vertical, 2)
                            .background(cve.severity.color.opacity(0.2))
                            .cornerRadius(4)
                    }
                }
                
                Text(cve.description)
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .lineLimit(3)
                
                Text("Published: \(cve.publishedDate.formatted(date: .abbreviated, time: .omitted))")
                    .font(.caption2)
                    .foregroundColor(.secondary)
            }
            .padding()
            .background(Color.gray.opacity(0.1))
            .cornerRadius(12)
        }
    }
    
    private var downloadSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Exploit Code")
                .font(.headline)
            
            VStack {
                if isDownloading {
                    HStack {
                        ProgressView()
                            .scaleEffect(0.8)
                        Text("Downloading exploit code...")
                            .font(.subheadline)
                    }
                    .padding()
                } else {
                    VStack(spacing: 8) {
                        Image(systemName: "square.and.arrow.down")
                            .font(.largeTitle)
                            .foregroundColor(.blue)
                        
                        Text("Download Exploit Code")
                            .font(.headline)
                        
                        Text("EDB-ID: \(exploit.id)")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        
                        Button("Download") {
                            downloadExploitCode()
                        }
                        .buttonStyle(.borderedProminent)
                    }
                    .padding()
                }
            }
            .frame(maxWidth: .infinity)
            .background(Color.gray.opacity(0.1))
            .cornerRadius(12)
        }
    }
    
    private func exploitCodeSection(_ code: ExploitCode) -> some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Exploit Code")
                .font(.headline)
            
            VStack(alignment: .leading, spacing: 8) {
                HStack {
                    VStack(alignment: .leading) {
                        Text("Downloaded")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        Text(code.downloadDate.formatted(date: .abbreviated, time: .shortened))
                            .font(.subheadline)
                    }
                    
                    Spacer()
                    
                    VStack(alignment: .trailing) {
                        Text("Size")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        Text(formatBytes(code.size))
                            .font(.subheadline)
                    }
                }
                
                ScrollView {
                    Text(String(code.code.prefix(500)) + (code.code.count > 500 ? "..." : ""))
                        .font(.system(.caption, design: .monospaced))
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                        .background(Color.black.opacity(0.05))
                        .cornerRadius(8)
                }
                .frame(maxHeight: 200)
                
                Button("View Full Code") {
                    showingCodeViewer = true
                }
                .buttonStyle(.bordered)
            }
            .padding()
            .background(Color.gray.opacity(0.1))
            .cornerRadius(12)
        }
    }
    
    private var referencesSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("References")
                .font(.headline)
            
            if exploit.references.isEmpty {
                Text("No references available")
                    .font(.body)
                    .foregroundColor(.secondary)
                    .padding()
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(12)
            } else {
                VStack(alignment: .leading, spacing: 8) {
                    ForEach(exploit.references, id: \.self) { reference in
                        Link(destination: URL(string: reference) ?? URL(string: "https://example.com")!) {
                            HStack {
                                Image(systemName: "link")
                                    .foregroundColor(.blue)
                                
                                Text(reference)
                                    .font(.caption)
                                    .lineLimit(1)
                                
                                Spacer()
                                
                                Image(systemName: "arrow.up.right.square")
                                    .font(.caption)
                                    .foregroundColor(.blue)
                            }
                            .padding(.vertical, 4)
                        }
                    }
                }
                .padding()
                .background(Color.gray.opacity(0.1))
                .cornerRadius(12)
            }
        }
    }
    
    private func typeColor(_ type: ExploitType) -> Color {
        switch type {
        case .remote, .codeExecution: return .red
        case .local, .privilege: return .orange
        case .webApp, .sqlInjection: return .blue
        case .dos: return .purple
        case .clientSide: return .green
        case .bufferOverflow: return .pink
        }
    }
    
    private func difficultyColor(_ difficulty: ExploitDifficulty) -> Color {
        switch difficulty {
        case .trivial, .easy: return .green
        case .medium: return .yellow
        case .hard, .expert: return .red
        }
    }
    
    private func formatBytes(_ bytes: Int) -> String {
        let formatter = ByteCountFormatter()
        formatter.countStyle = .file
        return formatter.string(fromByteCount: Int64(bytes))
    }
    
    private func downloadExploitCode() {
        isDownloading = true
        
        Task {
            let code = await exploitDB.downloadExploit(edbId: exploit.id)
            await MainActor.run {
                isDownloading = false
                exploitCode = code
            }
        }
    }
    
    private func loadRelatedData() async {
        // Load related CVE if available
        if let cveId = exploit.cveId {
            relatedCVE = exploitDB.cveEntries.first { $0.id == cveId }
        }
    }
}

struct InfoRow: View {
    let label: String
    let value: String
    var valueColor: Color = .primary
    
    var body: some View {
        HStack {
            Text(label)
                .font(.caption)
                .foregroundColor(.secondary)
            
            Spacer()
            
            Text(value)
                .font(.caption)
                .bold()
                .foregroundColor(valueColor)
        }
    }
}

struct ExploitCodeViewer: View {
    @Environment(\.dismiss) private var dismiss
    let exploitCode: ExploitCode
    @State private var searchText = ""
    
    var body: some View {
        NavigationView {
            VStack {
                if !searchText.isEmpty {
                    HStack {
                        TextField("Search in code...", text: $searchText)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                        
                        Button("Clear") {
                            searchText = ""
                        }
                        .buttonStyle(.bordered)
                    }
                    .padding(.horizontal)
                }
                
                ScrollView {
                    Text(exploitCode.code)
                        .font(.system(.caption, design: .monospaced))
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                        .background(Color.black.opacity(0.05))
                        .cornerRadius(8)
                        .padding()
                }
            }
            .navigationTitle("Exploit Code")
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("Search") {
                        // Toggle search
                        if searchText.isEmpty {
                            searchText = " " // Trigger search field appearance
                        } else {
                            searchText = ""
                        }
                    }
                }
                
                ToolbarItem(placement: .confirmationAction) {
                    Button("Done") {
                        dismiss()
                    }
                }
            }
        }
    }
}

#Preview {
    ExploitDetailView(exploit: ExploitEntry(
        id: "12345",
        cveId: "CVE-2024-1234",
        title: "Example Software Remote Code Execution Exploit",
        author: "Security Researcher",
        platform: ["Windows", "Linux"],
        type: .remote,
        code: nil,
        verifiedWorking: true,
        lastTested: Date(),
        difficulty: .medium,
        tags: ["rce", "remote", "example", "buffer-overflow"],
        references: ["https://exploit-db.com/exploits/12345", "https://github.com/researcher/exploit"]
    ))
}