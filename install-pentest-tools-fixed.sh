#!/bin/bash

# DonkTool Penetration Testing Tools Installation Script (Fixed Version)
# This script handles modern macOS environment constraints

echo "üîß Installing DonkTool Penetration Testing Tools (Fixed Version)..."
echo "=================================================================="

# Check if Homebrew is installed
if ! command -v brew &> /dev/null; then
    echo "‚ùå Homebrew not found. Installing Homebrew first..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# Update Homebrew
echo "üì¶ Updating Homebrew..."
brew update

# Install core Homebrew tools
echo "üì¶ Installing core penetration testing tools..."
brew install nmap nikto sqlmap gobuster

# Install DoS/Stress testing tools (AUTHORIZED USE ONLY)
echo "‚ö†Ô∏è  Installing DoS/Stress testing tools (AUTHORIZED USE ONLY)..."
echo "These tools are for defensive testing of systems you own or have permission to test."
brew install wrk hping

# Try to install dirb from alternative sources
echo "üì¶ Installing dirb (directory brute-forcer)..."
if ! command -v dirb &> /dev/null; then
    # Try installing from source since it's not in Homebrew
    cd /tmp
    if command -v git &> /dev/null && command -v make &> /dev/null; then
        echo "Installing dirb from source..."
        git clone https://github.com/v0re/dirb.git
        cd dirb
        chmod +x configure
        ./configure && make
        echo "‚ö†Ô∏è  Run 'sudo make install' to complete dirb installation"
        cd ..
        rm -rf dirb
    else
        echo "‚ö†Ô∏è  Cannot compile dirb - missing git or make"
    fi
else
    echo "‚úÖ dirb already installed"
fi

# Check Go version and install if needed
echo "üì¶ Checking Go installation..."
if ! command -v go &> /dev/null; then
    echo "Installing Go..."
    brew install go
else
    GO_VERSION=$(go version | awk '{print $3}' | sed 's/go//')
    echo "Current Go version: $GO_VERSION"
    
    # Check if Go version is compatible (needs 1.21+)
    if [[ "$GO_VERSION" < "1.21" ]]; then
        echo "‚ö†Ô∏è  Go version too old. Updating Go..."
        brew upgrade go
    fi
fi

# Set Go environment
export PATH=$PATH:$(go env GOPATH)/bin
echo 'export PATH=$PATH:$(go env GOPATH)/bin' >> ~/.zshrc

# Install Go-based tools with fallback to older versions
echo "üöÄ Installing Go-based security tools..."

# Install FFuF (this one worked in your output)
echo "Installing FFuF (web fuzzer)..."
go install github.com/ffuf/ffuf@latest

# Install Nuclei with version fallback
echo "Installing Nuclei (vulnerability scanner)..."
if ! go install github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest 2>/dev/null; then
    echo "Trying older Nuclei version..."
    go install github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
fi

# Install HTTPx with version fallback
echo "Installing HTTPx (HTTP probe)..."
if ! go install github.com/projectdiscovery/httpx/cmd/httpx@latest 2>/dev/null; then
    echo "Trying to install HTTPx from specific version..."
    go install github.com/projectdiscovery/httpx/cmd/httpx@v1.6.8
fi

# Install Subfinder with version fallback
echo "Installing Subfinder (subdomain enumeration)..."
if ! go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest 2>/dev/null; then
    echo "Trying older Subfinder version..."
    go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@v2.6.6
fi

# Install Katana with version fallback
echo "Installing Katana (web crawler)..."
if ! go install github.com/projectdiscovery/katana/cmd/katana@latest 2>/dev/null; then
    echo "Trying older Katana version..."
    go install github.com/projectdiscovery/katana/cmd/katana@v1.0.5
fi

# Install Python tools using pipx (recommended for modern macOS)
echo "üêç Installing Python-based security tools..."

# Install pipx if not present
if ! command -v pipx &> /dev/null; then
    echo "Installing pipx for Python package management..."
    brew install pipx
    pipx ensurepath
fi

# Install Python tools with pipx
echo "Installing SSLyze (SSL/TLS analyzer)..."
pipx install sslyze

echo "Installing Dirsearch (web path scanner)..."
pipx install dirsearch

echo "Installing Wfuzz (web fuzzer)..."
pipx install wfuzz

# Install slowhttptest for DoS testing (manual compilation)
echo "üîß Installing slowhttptest (Slowloris testing)..."
if ! command -v slowhttptest &> /dev/null; then
    cd /tmp
    if command -v git &> /dev/null; then
        git clone https://github.com/shekyan/slowhttptest.git
        cd slowhttptest
        if command -v make &> /dev/null; then
            chmod +x configure
            ./configure && make
            echo "‚ö†Ô∏è  Run 'sudo make install' to complete slowhttptest installation"
            echo "Or manually copy 'slowhttptest' binary to /usr/local/bin/"
        else
            echo "‚ö†Ô∏è  make not found - install Xcode Command Line Tools: xcode-select --install"
        fi
        cd ..
        rm -rf slowhttptest
    else
        echo "‚ö†Ô∏è  git not found - cannot install slowhttptest"
    fi
else
    echo "‚úÖ slowhttptest already installed"
fi

# Install advanced DoS testing tools
echo "üö® Installing advanced DoS testing tools (AUTHORIZED USE ONLY)..."
echo "These tools require explicit authorization and should only be used on systems you own."

# Install HULK (Python-based)
echo "Installing HULK HTTP flood tool..."
if ! command -v hulk &> /dev/null; then
    cd /tmp
    git clone https://github.com/grafov/hulk.git 2>/dev/null || echo "Note: HULK may need manual installation"
fi

# Install GoldenEye (Python-based)
echo "Installing GoldenEye Layer 7 attack tool..."
if ! command -v goldeneye &> /dev/null; then
    cd /tmp
    git clone https://github.com/jseidl/GoldenEye.git 2>/dev/null || echo "Note: GoldenEye may need manual installation"
fi

# Install additional stress testing tools via homebrew alternatives
echo "Installing additional stress testing tools..."
brew install siege 2>/dev/null || echo "‚ö†Ô∏è  Siege not available via homebrew"
brew install vegeta 2>/dev/null || echo "‚ö†Ô∏è  Vegeta not available via homebrew"

# Install Artillery.io for load testing
echo "Installing Artillery.io load testing framework..."
if command -v npm &> /dev/null; then
    npm install -g artillery@latest 2>/dev/null || echo "‚ö†Ô∏è  Artillery install failed - may need manual installation"
else
    echo "‚ö†Ô∏è  npm not found - cannot install Artillery.io"
fi

# Install iPerf3 for network testing
echo "Installing iPerf3 network testing tool..."
brew install iperf3 2>/dev/null || echo "‚ö†Ô∏è  iPerf3 not available via homebrew"

# Install Rust tools (optional)
echo "ü¶Ä Installing Rust-based tools (optional)..."
if command -v cargo &> /dev/null; then
    echo "Installing Feroxbuster (recursive content discovery)..."
    cargo install feroxbuster
else
    echo "‚ö†Ô∏è  Rust not found. Install with: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"
    echo "Then run: cargo install feroxbuster"
fi

# Update tool templates and paths
echo "üìã Updating tool templates and configurations..."

# Reload shell environment
source ~/.zshrc 2>/dev/null || true

# Update Nuclei templates if nuclei is available
if command -v nuclei &> /dev/null; then
    echo "Updating Nuclei templates..."
    nuclei -update-templates -silent
else
    echo "‚ö†Ô∏è  Nuclei not found in PATH. You may need to restart your terminal or run:"
    echo "export PATH=\$PATH:\$(go env GOPATH)/bin"
fi

# Create tool verification script
echo "üìù Creating tool verification script..."
cat > ~/verify-pentest-tools.sh << 'EOF'
#!/bin/bash
echo "DonkTool Penetration Testing Tools Verification"
echo "============================================"

# Core tools
echo "Core Tools:"
command -v nmap >/dev/null && echo "‚úÖ nmap" || echo "‚ùå nmap"
command -v nikto >/dev/null && echo "‚úÖ nikto" || echo "‚ùå nikto"
command -v sqlmap >/dev/null && echo "‚úÖ sqlmap" || echo "‚ùå sqlmap"
command -v gobuster >/dev/null && echo "‚úÖ gobuster" || echo "‚ùå gobuster"
command -v dirb >/dev/null && echo "‚úÖ dirb" || echo "‚ùå dirb"

# Go tools
echo "\nGo-based Tools:"
command -v nuclei >/dev/null && echo "‚úÖ nuclei" || echo "‚ùå nuclei"
command -v httpx >/dev/null && echo "‚úÖ httpx" || echo "‚ùå httpx"
command -v subfinder >/dev/null && echo "‚úÖ subfinder" || echo "‚ùå subfinder"
command -v ffuf >/dev/null && echo "‚úÖ ffuf" || echo "‚ùå ffuf"

# Python tools
echo "\nPython Tools:"
command -v sslyze >/dev/null && echo "‚úÖ sslyze" || echo "‚ùå sslyze"
command -v dirsearch >/dev/null && echo "‚úÖ dirsearch" || echo "‚ùå dirsearch"
command -v wfuzz >/dev/null && echo "‚úÖ wfuzz" || echo "‚ùå wfuzz"

# DoS/Stress testing tools
echo "\nDoS/Stress Testing Tools:"
command -v wrk >/dev/null && echo "‚úÖ wrk" || echo "‚ùå wrk"
command -v hping3 >/dev/null && echo "‚úÖ hping3" || echo "‚ùå hping3"
command -v slowhttptest >/dev/null && echo "‚úÖ slowhttptest" || echo "‚ùå slowhttptest"
command -v siege >/dev/null && echo "‚úÖ siege" || echo "‚ùå siege"
command -v iperf3 >/dev/null && echo "‚úÖ iperf3" || echo "‚ùå iperf3"
command -v artillery >/dev/null && echo "‚úÖ artillery" || echo "‚ùå artillery"

echo "\nüìä Verification complete!"
EOF

chmod +x ~/verify-pentest-tools.sh
echo "Created verification script at ~/verify-pentest-tools.sh"

# Verify installations
echo ""
echo "‚úÖ Installation Summary:"
echo "======================="

check_tool() {
    if command -v $1 &> /dev/null; then
        VERSION=$($1 --version 2>/dev/null | head -1 || echo "unknown")
        echo "‚úÖ $1 - Installed ($VERSION)"
    else
        echo "‚ùå $1 - Not found in PATH"
    fi
}

echo ""
echo "Core Tools:"
check_tool "nmap"
check_tool "nikto"
check_tool "sqlmap"
check_tool "gobuster"
check_tool "dirb"

echo ""
echo "Modern Go Tools:"
check_tool "nuclei"
check_tool "httpx"
check_tool "subfinder"
check_tool "ffuf"
check_tool "katana"

echo ""
echo "Python Tools:"
check_tool "sslyze"
check_tool "dirsearch"
check_tool "wfuzz"

echo ""
echo "DoS/Stress Testing Tools:"
check_tool "wrk"
check_tool "hping3"
check_tool "slowhttptest"

echo ""
echo "Optional Tools:"
check_tool "feroxbuster"

echo ""
echo "üéâ Installation complete!"
echo ""
echo "‚ö†Ô∏è  IMPORTANT ETHICAL NOTICE:"
echo "===================="
echo "DoS/Stress testing tools (wrk, hping3, slowhttptest) are included for:"
echo "‚Ä¢ Testing systems you own"
echo "‚Ä¢ Authorized penetration testing with written permission"
echo "‚Ä¢ Defensive security assessment of your infrastructure"
echo ""
echo "‚ùå DO NOT use these tools for:"
echo "‚Ä¢ Attacking systems you don't own"
echo "‚Ä¢ Unauthorized testing"
echo "‚Ä¢ Malicious activities"
echo ""
echo "Unauthorized DoS attacks are illegal and can result in criminal charges."
echo "Always ensure you have explicit permission before testing any system."
echo ""
echo "üîß Troubleshooting:"
echo "=================="
echo "If tools are not found in PATH after installation:"
echo "1. Restart your terminal"
echo "2. Run: source ~/.zshrc"
echo "3. Add to PATH manually: export PATH=\$PATH:\$(go env GOPATH)/bin"
echo ""
echo "For Python tools, ensure pipx is in PATH:"
echo "pipx ensurepath"
echo ""
echo "üìö Tool Documentation:"
echo "‚Ä¢ Nuclei: https://github.com/projectdiscovery/nuclei"
echo "‚Ä¢ HTTPx: https://github.com/projectdiscovery/httpx"
echo "‚Ä¢ Subfinder: https://github.com/projectdiscovery/subfinder"
echo "‚Ä¢ FFuF: https://github.com/ffuf/ffuf"
echo "‚Ä¢ SSLyze: https://github.com/nabla-c0d3/sslyze"
echo "‚Ä¢ Wrk: https://github.com/wg/wrk"
echo "‚Ä¢ slowhttptest: https://github.com/shekyan/slowhttptest"
echo ""
echo "üîê DonkTool now has access to professional-grade penetration testing tools!"
echo "\nüéØ Available Testing Modules:"
echo "‚Ä¢ Web Application Security Testing"
echo "‚Ä¢ DoS/Stress Testing (AUTHORIZED USE ONLY)"
echo "‚Ä¢ Network Vulnerability Scanning"
echo "‚Ä¢ CVE Database Integration"
echo "\nüöÄ Getting Started:"
echo "1. Start DonkTool in Xcode"
echo "2. Navigate to the desired testing module"
echo "3. Ensure you have written authorization for target systems"
echo "4. Run verification script: ~/verify-pentest-tools.sh"
echo "\n‚ö†Ô∏è  FINAL REMINDER:"
echo "DoS testing tools are for defensive security assessment only."
echo "Unauthorized testing is illegal and can result in criminal charges."
echo "Always ensure proper authorization before testing any system."